class Modal extends React.Component {
 
  render() {
    if(!this.props.show) {
      return null;
    }
    return (
      <div className="backdrop" >
        <div className="modal">
          {this.props.children}
          <form>
            <input className="inp_add inp_title" placeholder="Title"/>
            <input className="inp_add inp_description" placeholder="Description"/>
          </form>
          <div className="footer">
            <button className="add_task" onClick={this.props.addNewTask}> Add </button>
            <button className="button_close" onClick={this.props.onClose}>
              Close
            </button>
            
          </div>
        </div>
      </div>
    );
  }
}

class Todo {
  constructor(title, description, isDone){
    this.title = title;
    this.description = description;
    this.isDone = isDone;
  }
}

class ItemsList extends React.Component {
  render() {
    console.log('item list Props: ');
    console.log(this.props);
    let listItems = this.props.items.map((item, i) => {
      return (
        <li key={i}>
          <div className="text">{item.title}</div>
          <div className="descr">{item.description}</div>
          <input type="checkbox" defaultChecked={item.isDone} 
            onChange={this.handleChangeChk}/>
          <div
            onClick={this.props.clickAction.bind(this, i)}
            className="delete">Delete</div>
        </li>
      );
    });
    return <ul>{listItems}</ul>
  }
}

class App extends React.Component {
   constructor(props) {
     console.log('constructor App');
     super(props);
     this.onSetSearch = this.onSetSearch.bind(this);
     this.state = {
      isOpen: false,
      searchText: '',
      items: [],
      allItems: [
        new Todo ('Todo 1', 'Description 1', false),
        new Todo ('Todo 2', 'Description 2', true),
        new Todo ('Todo 3', 'Description 3', false)
      ]
    };
    for(let i=0; i < this.state.allItems.length; i++){
          this.state.items.push(this.state.allItems[i]);
    }
  }
  
  addNewTask = () => {
    let title = document.querySelector('.inp_title').value;
    let desc = document.querySelector('.inp_description').value;
    if(title != ''){
      let newItem = new Todo (title, desc, false);
      //добавляем новый элемент
      let newItems = this.state.items;
      newItems.push(newItem);
      this.setState({allItems: newItems});
      //скрываем модальное окно
      this.setState({
        isOpen: !this.state.isOpen
      });
    }
  }
  //скрытие модалього окна
  toggleModal = () => {
   this.setState({
     isOpen: !this.state.isOpen
   });
  }            
  
  deleteItem = (idx => {
    let newItems = this.state.items;
    newItems.splice(idx, 1);
    this.setState({items: newItems});
  });

   onSetSearch() {
     let text = document.querySelector('.inp_search').value;
     if (text.length >= 3 || text == '') {
      this.state.searchText = text; 
      //ищем в первоначальном списке
      let newItems = [];
      for(let i = 0; i < this.state.allItems.length; i++) {
        if(this.state.allItems[i].title.toLowerCase().indexOf(this.state.searchText.toLowerCase()) >= 0
         || this.state.allItems[i].description.toLowerCase().indexOf(this.state.searchText.toLowerCase()) >= 0){
          console.log(this.state.allItems[i]);
          newItems.push(this.state.allItems[i]);
        }
      }
      this.state.items = newItems;
      this.forceUpdate();
     }
   }
  render() {
    return (
      <div className="todo-list">
         <form>
          <input className="inp_search" type="text" name="name" placeholder="..." />
          <button type="button" className="button_search" onClick={this.onSetSearch}>Search</button>
          <button type="button" className="button_add" onClick={this.toggleModal}> Add new task </button>
        </form>
        <ItemsList
           items={this.state.items}
           searchText={this.state.searchText}
           clickAction={this.deleteItem} />
         <Modal 
           show={this.state.isOpen}
           addNewTask={this.addNewTask}
           onClose={this.toggleModal}>
           <h2>Add new task</h2>
        </Modal>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('container'));